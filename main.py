import numpy as np
import cv2
import base64
from keras.applications.resnet50 import ResNet50
from keras.preprocessing import image
from keras.applications.resnet50 import preprocess_input, decode_predictions

# Load the pre-trained ResNet50 model
model = ResNet50(weights='imagenet')

# Base64 string of the image
base64_string = ''

# Decode the base64 string to a numpy array
img_data = base64.b64decode(base64_string)
np_arr = np.frombuffer(img_data, np.uint8)

# Decode the numpy array to an image
img = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)

# Preprocess the image
img = cv2.resize(img, (224, 224))
x = image.img_to_array(img)
x = np.expand_dims(x, axis=0)
x = preprocess_input(x)

# Make predictions
preds = model.predict(x)

# Decode and display predictions
print('Predicted:', decode_predictions(preds, top=3)[0])